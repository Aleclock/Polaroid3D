//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CustomInputActions/XRICustomInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRICustomInputActions"",
    ""maps"": [
        {
            ""name"": ""XRI Head"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Head Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Head Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Head Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Head Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Custom"",
            ""id"": ""22336389-9fb1-4c2c-8635-0ed30db0d29e"",
            ""actions"": [
                {
                    ""name"": ""LeftHand Position"",
                    ""type"": ""Value"",
                    ""id"": ""8e956466-e193-41e4-8f6b-59b93480e2dc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""60360df1-878e-4d54-a949-6b177ce9d0c3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Trigger Value"",
                    ""type"": ""Value"",
                    ""id"": ""e3ef07b1-af1c-460e-a542-bc6f1ca39d6f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Grip"",
                    ""type"": ""Value"",
                    ""id"": ""a552a809-8e62-4cf4-9beb-514238f58be7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Grip Value"",
                    ""type"": ""Value"",
                    ""id"": ""3b5511e8-c51f-4da2-ba18-65f4a623a90e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHand Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3ab10f6a-532f-44e1-813c-72e16c31cd75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHand Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""2ab46d70-4689-490a-9985-fdd06ab66bf6"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8da6ed3a-f621-49fe-8c76-1f6b7d7754d6"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""7e3b93d1-b21d-43ee-aad3-e2eb747ad2a1"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHand Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""85abef02-7da7-463c-b3e4-da8ab54489e5"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f3846a94-f474-4f06-b1ca-ecfcf96a9b14"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""4738ddcb-ca8a-4569-a157-47f797d2dd2d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""a95c7c3d-7c51-4d8b-8ea9-2c88f335b194"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHand Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""ddcbacb4-bc5f-48eb-a04b-3312dccc6d84"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""30b8562d-61fd-47b3-913a-8dcc57b87fe4"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""07f15495-8db3-4ba7-b1d6-b26d6a27438e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""953e0b4c-6ef8-4334-894b-2ea17fdb3ea7"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Grip Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2a312d8-2e8d-44a1-a036-6b01efd78e84"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d343fff-deaf-46ca-ac05-3563302d755d"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4942c533-738c-443d-bb34-e87d7c45baf1"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c50138bc-1fc8-441f-9e07-29eb542d0213"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""LeftHand Trigger Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Custom"",
            ""id"": ""99ce76d3-82c5-4289-9670-2ecffa6833fd"",
            ""actions"": [
                {
                    ""name"": ""RightHand Position"",
                    ""type"": ""Value"",
                    ""id"": ""9d04ace1-712f-47b6-9420-f152081fda58"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""80550c97-1569-4d23-810b-66eef982d7dc"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""a6c7231d-c55d-4dd4-9e87-877bb5522ef5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Trigger Value"",
                    ""type"": ""Value"",
                    ""id"": ""a116bfdf-5ba8-4cb9-ae10-488bd979e132"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Grip"",
                    ""type"": ""Value"",
                    ""id"": ""1e2162ad-b0cf-4e9f-ac0c-c465029ab5bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Grip Value"",
                    ""type"": ""Value"",
                    ""id"": ""0ff1b439-bbcd-4179-8029-7c10317f8119"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHand Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""430a28af-aca0-435f-a719-218fff34395e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHand Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""f71e7bff-3900-4dcd-9acf-10909dd3e9bc"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62690862-4688-4010-975b-b3d9c6062157"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""RightHand Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""935afc26-85cf-4ba5-9edd-37420c78299b"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHand Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""81a7e3fe-c27b-4f6c-8060-9cce41086d09"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f1f2f9f2-e73d-42eb-9dfb-8133b0ab6fbb"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""42db74ca-3dbe-4b63-bc17-e42c9bea10c0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""486d5793-6483-4a97-909c-05775c30d859"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHand Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""40cc2ad4-9e90-4e5f-8f23-0098ad94639c"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""32af941c-7ff3-4e28-9765-7cf7a06dc9eb"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""8e9ef0fc-9993-46a8-93cb-0c0ae7e66e50"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""72c7437d-e565-402b-a5f8-ba495501d6d6"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Grip Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b3953e7-9210-4562-b4de-ae47d29a6fc3"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4800c25d-fcab-4789-9728-2878985d53a4"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620182f7-1f2f-4bfc-9e93-31f3b0c5f02f"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bf164da-b496-4030-9c55-6d236792b4de"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""RightHand Trigger Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Continuous Move"",
            ""bindingGroup"": ""Continuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Noncontinuous Move"",
            ""bindingGroup"": ""Noncontinuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // XRI Head
        m_XRIHead = asset.FindActionMap("XRI Head", throwIfNotFound: true);
        m_XRIHead_HeadPosition = m_XRIHead.FindAction("Head Position", throwIfNotFound: true);
        m_XRIHead_HeadRotation = m_XRIHead.FindAction("Head Rotation", throwIfNotFound: true);
        // XRI LeftHand Custom
        m_XRILeftHandCustom = asset.FindActionMap("XRI LeftHand Custom", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandPosition = m_XRILeftHandCustom.FindAction("LeftHand Position", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandRotation = m_XRILeftHandCustom.FindAction("LeftHand Rotation", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandTrigger = m_XRILeftHandCustom.FindAction("LeftHand Trigger", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandTriggerValue = m_XRILeftHandCustom.FindAction("LeftHand Trigger Value", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandGrip = m_XRILeftHandCustom.FindAction("LeftHand Grip", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandGripValue = m_XRILeftHandCustom.FindAction("LeftHand Grip Value", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandHapticDevice = m_XRILeftHandCustom.FindAction("LeftHand Haptic Device", throwIfNotFound: true);
        m_XRILeftHandCustom_LeftHandTrackingState = m_XRILeftHandCustom.FindAction("LeftHand Tracking State", throwIfNotFound: true);
        // XRI RightHand Custom
        m_XRIRightHandCustom = asset.FindActionMap("XRI RightHand Custom", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandPosition = m_XRIRightHandCustom.FindAction("RightHand Position", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandRotation = m_XRIRightHandCustom.FindAction("RightHand Rotation", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandTrigger = m_XRIRightHandCustom.FindAction("RightHand Trigger", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandTriggerValue = m_XRIRightHandCustom.FindAction("RightHand Trigger Value", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandGrip = m_XRIRightHandCustom.FindAction("RightHand Grip", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandGripValue = m_XRIRightHandCustom.FindAction("RightHand Grip Value", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandHapticDevice = m_XRIRightHandCustom.FindAction("RightHand Haptic Device", throwIfNotFound: true);
        m_XRIRightHandCustom_RightHandTrackingState = m_XRIRightHandCustom.FindAction("RightHand Tracking State", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI Head
    private readonly InputActionMap m_XRIHead;
    private List<IXRIHeadActions> m_XRIHeadActionsCallbackInterfaces = new List<IXRIHeadActions>();
    private readonly InputAction m_XRIHead_HeadPosition;
    private readonly InputAction m_XRIHead_HeadRotation;
    public struct XRIHeadActions
    {
        private @CustomInputActions m_Wrapper;
        public XRIHeadActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HeadPosition => m_Wrapper.m_XRIHead_HeadPosition;
        public InputAction @HeadRotation => m_Wrapper.m_XRIHead_HeadRotation;
        public InputActionMap Get() { return m_Wrapper.m_XRIHead; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIHeadActions set) { return set.Get(); }
        public void AddCallbacks(IXRIHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Add(instance);
            @HeadPosition.started += instance.OnHeadPosition;
            @HeadPosition.performed += instance.OnHeadPosition;
            @HeadPosition.canceled += instance.OnHeadPosition;
            @HeadRotation.started += instance.OnHeadRotation;
            @HeadRotation.performed += instance.OnHeadRotation;
            @HeadRotation.canceled += instance.OnHeadRotation;
        }

        private void UnregisterCallbacks(IXRIHeadActions instance)
        {
            @HeadPosition.started -= instance.OnHeadPosition;
            @HeadPosition.performed -= instance.OnHeadPosition;
            @HeadPosition.canceled -= instance.OnHeadPosition;
            @HeadRotation.started -= instance.OnHeadRotation;
            @HeadRotation.performed -= instance.OnHeadRotation;
            @HeadRotation.canceled -= instance.OnHeadRotation;
        }

        public void RemoveCallbacks(IXRIHeadActions instance)
        {
            if (m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRIHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIHeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRIHeadActions @XRIHead => new XRIHeadActions(this);

    // XRI LeftHand Custom
    private readonly InputActionMap m_XRILeftHandCustom;
    private List<IXRILeftHandCustomActions> m_XRILeftHandCustomActionsCallbackInterfaces = new List<IXRILeftHandCustomActions>();
    private readonly InputAction m_XRILeftHandCustom_LeftHandPosition;
    private readonly InputAction m_XRILeftHandCustom_LeftHandRotation;
    private readonly InputAction m_XRILeftHandCustom_LeftHandTrigger;
    private readonly InputAction m_XRILeftHandCustom_LeftHandTriggerValue;
    private readonly InputAction m_XRILeftHandCustom_LeftHandGrip;
    private readonly InputAction m_XRILeftHandCustom_LeftHandGripValue;
    private readonly InputAction m_XRILeftHandCustom_LeftHandHapticDevice;
    private readonly InputAction m_XRILeftHandCustom_LeftHandTrackingState;
    public struct XRILeftHandCustomActions
    {
        private @CustomInputActions m_Wrapper;
        public XRILeftHandCustomActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandPosition => m_Wrapper.m_XRILeftHandCustom_LeftHandPosition;
        public InputAction @LeftHandRotation => m_Wrapper.m_XRILeftHandCustom_LeftHandRotation;
        public InputAction @LeftHandTrigger => m_Wrapper.m_XRILeftHandCustom_LeftHandTrigger;
        public InputAction @LeftHandTriggerValue => m_Wrapper.m_XRILeftHandCustom_LeftHandTriggerValue;
        public InputAction @LeftHandGrip => m_Wrapper.m_XRILeftHandCustom_LeftHandGrip;
        public InputAction @LeftHandGripValue => m_Wrapper.m_XRILeftHandCustom_LeftHandGripValue;
        public InputAction @LeftHandHapticDevice => m_Wrapper.m_XRILeftHandCustom_LeftHandHapticDevice;
        public InputAction @LeftHandTrackingState => m_Wrapper.m_XRILeftHandCustom_LeftHandTrackingState;
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHandCustom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRILeftHandCustomActions set) { return set.Get(); }
        public void AddCallbacks(IXRILeftHandCustomActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftHandCustomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftHandCustomActionsCallbackInterfaces.Add(instance);
            @LeftHandPosition.started += instance.OnLeftHandPosition;
            @LeftHandPosition.performed += instance.OnLeftHandPosition;
            @LeftHandPosition.canceled += instance.OnLeftHandPosition;
            @LeftHandRotation.started += instance.OnLeftHandRotation;
            @LeftHandRotation.performed += instance.OnLeftHandRotation;
            @LeftHandRotation.canceled += instance.OnLeftHandRotation;
            @LeftHandTrigger.started += instance.OnLeftHandTrigger;
            @LeftHandTrigger.performed += instance.OnLeftHandTrigger;
            @LeftHandTrigger.canceled += instance.OnLeftHandTrigger;
            @LeftHandTriggerValue.started += instance.OnLeftHandTriggerValue;
            @LeftHandTriggerValue.performed += instance.OnLeftHandTriggerValue;
            @LeftHandTriggerValue.canceled += instance.OnLeftHandTriggerValue;
            @LeftHandGrip.started += instance.OnLeftHandGrip;
            @LeftHandGrip.performed += instance.OnLeftHandGrip;
            @LeftHandGrip.canceled += instance.OnLeftHandGrip;
            @LeftHandGripValue.started += instance.OnLeftHandGripValue;
            @LeftHandGripValue.performed += instance.OnLeftHandGripValue;
            @LeftHandGripValue.canceled += instance.OnLeftHandGripValue;
            @LeftHandHapticDevice.started += instance.OnLeftHandHapticDevice;
            @LeftHandHapticDevice.performed += instance.OnLeftHandHapticDevice;
            @LeftHandHapticDevice.canceled += instance.OnLeftHandHapticDevice;
            @LeftHandTrackingState.started += instance.OnLeftHandTrackingState;
            @LeftHandTrackingState.performed += instance.OnLeftHandTrackingState;
            @LeftHandTrackingState.canceled += instance.OnLeftHandTrackingState;
        }

        private void UnregisterCallbacks(IXRILeftHandCustomActions instance)
        {
            @LeftHandPosition.started -= instance.OnLeftHandPosition;
            @LeftHandPosition.performed -= instance.OnLeftHandPosition;
            @LeftHandPosition.canceled -= instance.OnLeftHandPosition;
            @LeftHandRotation.started -= instance.OnLeftHandRotation;
            @LeftHandRotation.performed -= instance.OnLeftHandRotation;
            @LeftHandRotation.canceled -= instance.OnLeftHandRotation;
            @LeftHandTrigger.started -= instance.OnLeftHandTrigger;
            @LeftHandTrigger.performed -= instance.OnLeftHandTrigger;
            @LeftHandTrigger.canceled -= instance.OnLeftHandTrigger;
            @LeftHandTriggerValue.started -= instance.OnLeftHandTriggerValue;
            @LeftHandTriggerValue.performed -= instance.OnLeftHandTriggerValue;
            @LeftHandTriggerValue.canceled -= instance.OnLeftHandTriggerValue;
            @LeftHandGrip.started -= instance.OnLeftHandGrip;
            @LeftHandGrip.performed -= instance.OnLeftHandGrip;
            @LeftHandGrip.canceled -= instance.OnLeftHandGrip;
            @LeftHandGripValue.started -= instance.OnLeftHandGripValue;
            @LeftHandGripValue.performed -= instance.OnLeftHandGripValue;
            @LeftHandGripValue.canceled -= instance.OnLeftHandGripValue;
            @LeftHandHapticDevice.started -= instance.OnLeftHandHapticDevice;
            @LeftHandHapticDevice.performed -= instance.OnLeftHandHapticDevice;
            @LeftHandHapticDevice.canceled -= instance.OnLeftHandHapticDevice;
            @LeftHandTrackingState.started -= instance.OnLeftHandTrackingState;
            @LeftHandTrackingState.performed -= instance.OnLeftHandTrackingState;
            @LeftHandTrackingState.canceled -= instance.OnLeftHandTrackingState;
        }

        public void RemoveCallbacks(IXRILeftHandCustomActions instance)
        {
            if (m_Wrapper.m_XRILeftHandCustomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRILeftHandCustomActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftHandCustomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftHandCustomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRILeftHandCustomActions @XRILeftHandCustom => new XRILeftHandCustomActions(this);

    // XRI RightHand Custom
    private readonly InputActionMap m_XRIRightHandCustom;
    private List<IXRIRightHandCustomActions> m_XRIRightHandCustomActionsCallbackInterfaces = new List<IXRIRightHandCustomActions>();
    private readonly InputAction m_XRIRightHandCustom_RightHandPosition;
    private readonly InputAction m_XRIRightHandCustom_RightHandRotation;
    private readonly InputAction m_XRIRightHandCustom_RightHandTrigger;
    private readonly InputAction m_XRIRightHandCustom_RightHandTriggerValue;
    private readonly InputAction m_XRIRightHandCustom_RightHandGrip;
    private readonly InputAction m_XRIRightHandCustom_RightHandGripValue;
    private readonly InputAction m_XRIRightHandCustom_RightHandHapticDevice;
    private readonly InputAction m_XRIRightHandCustom_RightHandTrackingState;
    public struct XRIRightHandCustomActions
    {
        private @CustomInputActions m_Wrapper;
        public XRIRightHandCustomActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightHandPosition => m_Wrapper.m_XRIRightHandCustom_RightHandPosition;
        public InputAction @RightHandRotation => m_Wrapper.m_XRIRightHandCustom_RightHandRotation;
        public InputAction @RightHandTrigger => m_Wrapper.m_XRIRightHandCustom_RightHandTrigger;
        public InputAction @RightHandTriggerValue => m_Wrapper.m_XRIRightHandCustom_RightHandTriggerValue;
        public InputAction @RightHandGrip => m_Wrapper.m_XRIRightHandCustom_RightHandGrip;
        public InputAction @RightHandGripValue => m_Wrapper.m_XRIRightHandCustom_RightHandGripValue;
        public InputAction @RightHandHapticDevice => m_Wrapper.m_XRIRightHandCustom_RightHandHapticDevice;
        public InputAction @RightHandTrackingState => m_Wrapper.m_XRIRightHandCustom_RightHandTrackingState;
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHandCustom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRIRightHandCustomActions set) { return set.Get(); }
        public void AddCallbacks(IXRIRightHandCustomActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightHandCustomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightHandCustomActionsCallbackInterfaces.Add(instance);
            @RightHandPosition.started += instance.OnRightHandPosition;
            @RightHandPosition.performed += instance.OnRightHandPosition;
            @RightHandPosition.canceled += instance.OnRightHandPosition;
            @RightHandRotation.started += instance.OnRightHandRotation;
            @RightHandRotation.performed += instance.OnRightHandRotation;
            @RightHandRotation.canceled += instance.OnRightHandRotation;
            @RightHandTrigger.started += instance.OnRightHandTrigger;
            @RightHandTrigger.performed += instance.OnRightHandTrigger;
            @RightHandTrigger.canceled += instance.OnRightHandTrigger;
            @RightHandTriggerValue.started += instance.OnRightHandTriggerValue;
            @RightHandTriggerValue.performed += instance.OnRightHandTriggerValue;
            @RightHandTriggerValue.canceled += instance.OnRightHandTriggerValue;
            @RightHandGrip.started += instance.OnRightHandGrip;
            @RightHandGrip.performed += instance.OnRightHandGrip;
            @RightHandGrip.canceled += instance.OnRightHandGrip;
            @RightHandGripValue.started += instance.OnRightHandGripValue;
            @RightHandGripValue.performed += instance.OnRightHandGripValue;
            @RightHandGripValue.canceled += instance.OnRightHandGripValue;
            @RightHandHapticDevice.started += instance.OnRightHandHapticDevice;
            @RightHandHapticDevice.performed += instance.OnRightHandHapticDevice;
            @RightHandHapticDevice.canceled += instance.OnRightHandHapticDevice;
            @RightHandTrackingState.started += instance.OnRightHandTrackingState;
            @RightHandTrackingState.performed += instance.OnRightHandTrackingState;
            @RightHandTrackingState.canceled += instance.OnRightHandTrackingState;
        }

        private void UnregisterCallbacks(IXRIRightHandCustomActions instance)
        {
            @RightHandPosition.started -= instance.OnRightHandPosition;
            @RightHandPosition.performed -= instance.OnRightHandPosition;
            @RightHandPosition.canceled -= instance.OnRightHandPosition;
            @RightHandRotation.started -= instance.OnRightHandRotation;
            @RightHandRotation.performed -= instance.OnRightHandRotation;
            @RightHandRotation.canceled -= instance.OnRightHandRotation;
            @RightHandTrigger.started -= instance.OnRightHandTrigger;
            @RightHandTrigger.performed -= instance.OnRightHandTrigger;
            @RightHandTrigger.canceled -= instance.OnRightHandTrigger;
            @RightHandTriggerValue.started -= instance.OnRightHandTriggerValue;
            @RightHandTriggerValue.performed -= instance.OnRightHandTriggerValue;
            @RightHandTriggerValue.canceled -= instance.OnRightHandTriggerValue;
            @RightHandGrip.started -= instance.OnRightHandGrip;
            @RightHandGrip.performed -= instance.OnRightHandGrip;
            @RightHandGrip.canceled -= instance.OnRightHandGrip;
            @RightHandGripValue.started -= instance.OnRightHandGripValue;
            @RightHandGripValue.performed -= instance.OnRightHandGripValue;
            @RightHandGripValue.canceled -= instance.OnRightHandGripValue;
            @RightHandHapticDevice.started -= instance.OnRightHandHapticDevice;
            @RightHandHapticDevice.performed -= instance.OnRightHandHapticDevice;
            @RightHandHapticDevice.canceled -= instance.OnRightHandHapticDevice;
            @RightHandTrackingState.started -= instance.OnRightHandTrackingState;
            @RightHandTrackingState.performed -= instance.OnRightHandTrackingState;
            @RightHandTrackingState.canceled -= instance.OnRightHandTrackingState;
        }

        public void RemoveCallbacks(IXRIRightHandCustomActions instance)
        {
            if (m_Wrapper.m_XRIRightHandCustomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRIRightHandCustomActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightHandCustomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightHandCustomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRIRightHandCustomActions @XRIRightHandCustom => new XRIRightHandCustomActions(this);
    private int m_GenericXRControllerSchemeIndex = -1;
    public InputControlScheme GenericXRControllerScheme
    {
        get
        {
            if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
            return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
        }
    }
    private int m_ContinuousMoveSchemeIndex = -1;
    public InputControlScheme ContinuousMoveScheme
    {
        get
        {
            if (m_ContinuousMoveSchemeIndex == -1) m_ContinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Continuous Move");
            return asset.controlSchemes[m_ContinuousMoveSchemeIndex];
        }
    }
    private int m_NoncontinuousMoveSchemeIndex = -1;
    public InputControlScheme NoncontinuousMoveScheme
    {
        get
        {
            if (m_NoncontinuousMoveSchemeIndex == -1) m_NoncontinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Noncontinuous Move");
            return asset.controlSchemes[m_NoncontinuousMoveSchemeIndex];
        }
    }
    public interface IXRIHeadActions
    {
        void OnHeadPosition(InputAction.CallbackContext context);
        void OnHeadRotation(InputAction.CallbackContext context);
    }
    public interface IXRILeftHandCustomActions
    {
        void OnLeftHandPosition(InputAction.CallbackContext context);
        void OnLeftHandRotation(InputAction.CallbackContext context);
        void OnLeftHandTrigger(InputAction.CallbackContext context);
        void OnLeftHandTriggerValue(InputAction.CallbackContext context);
        void OnLeftHandGrip(InputAction.CallbackContext context);
        void OnLeftHandGripValue(InputAction.CallbackContext context);
        void OnLeftHandHapticDevice(InputAction.CallbackContext context);
        void OnLeftHandTrackingState(InputAction.CallbackContext context);
    }
    public interface IXRIRightHandCustomActions
    {
        void OnRightHandPosition(InputAction.CallbackContext context);
        void OnRightHandRotation(InputAction.CallbackContext context);
        void OnRightHandTrigger(InputAction.CallbackContext context);
        void OnRightHandTriggerValue(InputAction.CallbackContext context);
        void OnRightHandGrip(InputAction.CallbackContext context);
        void OnRightHandGripValue(InputAction.CallbackContext context);
        void OnRightHandHapticDevice(InputAction.CallbackContext context);
        void OnRightHandTrackingState(InputAction.CallbackContext context);
    }
}
